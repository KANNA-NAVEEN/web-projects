<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.fresco.ecommerce.ECommerceApplicationTests" time="7.704" tests="15" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Workspaces\Eclipse\web projects\ecommerce\target\test-classes;C:\Workspaces\Eclipse\web projects\ecommerce\target\classes;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.2.3\spring-boot-starter-data-jpa-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.2.3\spring-boot-starter-aop-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-aop\6.1.4\spring-aop-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\aspectj\aspectjweaver\1.9.21\aspectjweaver-1.9.21.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.2.3\spring-boot-starter-jdbc-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\com\zaxxer\HikariCP\5.0.1\HikariCP-5.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-jdbc\6.1.4\spring-jdbc-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\hibernate\orm\hibernate-core\6.4.4.Final\hibernate-core-6.4.4.Final.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\Kanna Naveen\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\Kanna Naveen\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\Kanna Naveen\.m2\repository\net\bytebuddy\byte-buddy\1.14.12\byte-buddy-1.14.12.jar;C:\Users\Kanna Naveen\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.4\jaxb-runtime-4.0.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.4\jaxb-core-4.0.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\eclipse\angus\angus-activation\2.0.1\angus-activation-2.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\glassfish\jaxb\txw2\4.0.4\txw2-4.0.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\data\spring-data-jpa\3.2.3\spring-data-jpa-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\data\spring-data-commons\3.2.3\spring-data-commons-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-orm\6.1.4\spring-orm-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-context\6.1.4\spring-context-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-tx\6.1.4\spring-tx-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-beans\6.1.4\spring-beans-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\slf4j\slf4j-api\2.0.12\slf4j-api-2.0.12.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-aspects\6.1.4\spring-aspects-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.2.3\spring-boot-starter-web-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.3\spring-boot-starter-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.3\spring-boot-starter-logging-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\ch\qos\logback\logback-classic\1.4.14\logback-classic-1.4.14.jar;C:\Users\Kanna Naveen\.m2\repository\ch\qos\logback\logback-core\1.4.14\logback-core-1.4.14.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\slf4j\jul-to-slf4j\2.0.12\jul-to-slf4j-2.0.12.jar;C:\Users\Kanna Naveen\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.3\spring-boot-starter-json-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.4\jackson-databind-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.4\jackson-annotations-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.4\jackson-core-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.4\jackson-datatype-jdk8-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.4\jackson-datatype-jsr310-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.4\jackson-module-parameter-names-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.2.3\spring-boot-starter-tomcat-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.19\tomcat-embed-core-10.1.19.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.19\tomcat-embed-el-10.1.19.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.19\tomcat-embed-websocket-10.1.19.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-web\6.1.4\spring-web-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\io\micrometer\micrometer-observation\1.12.3\micrometer-observation-1.12.3.jar;C:\Users\Kanna Naveen\.m2\repository\io\micrometer\micrometer-commons\1.12.3\micrometer-commons-1.12.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-webmvc\6.1.4\spring-webmvc-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-expression\6.1.4\spring-expression-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.3\spring-boot-starter-test-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-test\3.2.3\spring-boot-test-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.3\spring-boot-test-autoconfigure-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.1\jakarta.xml.bind-api-4.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.2\jakarta.activation-api-2.1.2.jar;C:\Users\Kanna Naveen\.m2\repository\net\minidev\json-smart\2.5.0\json-smart-2.5.0.jar;C:\Users\Kanna Naveen\.m2\repository\net\minidev\accessors-smart\2.5.0\accessors-smart-2.5.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\ow2\asm\asm\9.3\asm-9.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\awaitility\awaitility\4.2.0\awaitility-4.2.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.2\junit-jupiter-api-5.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\platform\junit-platform-commons\1.10.2\junit-platform-commons-1.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.2\junit-jupiter-engine-5.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\platform\junit-platform-engine\1.10.2\junit-platform-engine-1.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\Kanna Naveen\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.12\byte-buddy-agent-1.14.12.jar;C:\Users\Kanna Naveen\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\Kanna Naveen\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-core\6.1.4\spring-core-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-jcl\6.1.4\spring-jcl-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-test\6.1.4\spring-test-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\Kanna Naveen\.m2\repository\com\googlecode\json-simple\json-simple\1.1.1\json-simple-1.1.1.jar;C:\Users\Kanna Naveen\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\hamcrest\hamcrest-core\2.2\hamcrest-core-2.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\projectlombok\lombok\1.18.30\lombok-1.18.30.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-devtools\3.2.3\spring-boot-devtools-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot\3.2.3\spring-boot-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.3\spring-boot-autoconfigure-3.2.3.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Asia/Calcutta"/>
    <property name="org.jboss.logging.provider" value="slf4j"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-17\bin"/>
    <property name="sun.java.command" value="C:\Users\Kanna Naveen\AppData\Local\Temp\surefire16259247560553314419\surefirebooter-20240331184955679_3.jar C:\Users\Kanna Naveen\AppData\Local\Temp\surefire16259247560553314419 2024-03-31T18-49-55_444-jvmRun1 surefire-20240331184955679_1tmp surefire_0-20240331184955679_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Workspaces\Eclipse\web projects\ecommerce\target\test-classes;C:\Workspaces\Eclipse\web projects\ecommerce\target\classes;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-data-jpa\3.2.3\spring-boot-starter-data-jpa-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-aop\3.2.3\spring-boot-starter-aop-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-aop\6.1.4\spring-aop-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\aspectj\aspectjweaver\1.9.21\aspectjweaver-1.9.21.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-jdbc\3.2.3\spring-boot-starter-jdbc-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\com\zaxxer\HikariCP\5.0.1\HikariCP-5.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-jdbc\6.1.4\spring-jdbc-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\hibernate\orm\hibernate-core\6.4.4.Final\hibernate-core-6.4.4.Final.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\jboss\logging\jboss-logging\3.5.3.Final\jboss-logging-3.5.3.Final.jar;C:\Users\Kanna Naveen\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\Kanna Naveen\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\classmate\1.6.0\classmate-1.6.0.jar;C:\Users\Kanna Naveen\.m2\repository\net\bytebuddy\byte-buddy\1.14.12\byte-buddy-1.14.12.jar;C:\Users\Kanna Naveen\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.4\jaxb-runtime-4.0.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.4\jaxb-core-4.0.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\eclipse\angus\angus-activation\2.0.1\angus-activation-2.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\glassfish\jaxb\txw2\4.0.4\txw2-4.0.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.2\istack-commons-runtime-4.1.2.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\data\spring-data-jpa\3.2.3\spring-data-jpa-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\data\spring-data-commons\3.2.3\spring-data-commons-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-orm\6.1.4\spring-orm-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-context\6.1.4\spring-context-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-tx\6.1.4\spring-tx-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-beans\6.1.4\spring-beans-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\annotation\jakarta.annotation-api\2.1.1\jakarta.annotation-api-2.1.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\slf4j\slf4j-api\2.0.12\slf4j-api-2.0.12.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-aspects\6.1.4\spring-aspects-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-web\3.2.3\spring-boot-starter-web-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter\3.2.3\spring-boot-starter-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-logging\3.2.3\spring-boot-starter-logging-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\ch\qos\logback\logback-classic\1.4.14\logback-classic-1.4.14.jar;C:\Users\Kanna Naveen\.m2\repository\ch\qos\logback\logback-core\1.4.14\logback-core-1.4.14.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.21.1\log4j-to-slf4j-2.21.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\logging\log4j\log4j-api\2.21.1\log4j-api-2.21.1.jar;C:\Users\Kanna Naveen\.m2\repository\org\slf4j\jul-to-slf4j\2.0.12\jul-to-slf4j-2.0.12.jar;C:\Users\Kanna Naveen\.m2\repository\org\yaml\snakeyaml\2.2\snakeyaml-2.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-json\3.2.3\spring-boot-starter-json-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.4\jackson-databind-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.4\jackson-annotations-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.4\jackson-core-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.15.4\jackson-datatype-jdk8-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.4\jackson-datatype-jsr310-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\fasterxml\jackson\module\jackson-module-parameter-names\2.15.4\jackson-module-parameter-names-2.15.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-tomcat\3.2.3\spring-boot-starter-tomcat-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\10.1.19\tomcat-embed-core-10.1.19.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\10.1.19\tomcat-embed-el-10.1.19.jar;C:\Users\Kanna Naveen\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\10.1.19\tomcat-embed-websocket-10.1.19.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-web\6.1.4\spring-web-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\io\micrometer\micrometer-observation\1.12.3\micrometer-observation-1.12.3.jar;C:\Users\Kanna Naveen\.m2\repository\io\micrometer\micrometer-commons\1.12.3\micrometer-commons-1.12.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-webmvc\6.1.4\spring-webmvc-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-expression\6.1.4\spring-expression-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-starter-test\3.2.3\spring-boot-starter-test-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-test\3.2.3\spring-boot-test-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-test-autoconfigure\3.2.3\spring-boot-test-autoconfigure-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\com\jayway\jsonpath\json-path\2.9.0\json-path-2.9.0.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.1\jakarta.xml.bind-api-4.0.1.jar;C:\Users\Kanna Naveen\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.2\jakarta.activation-api-2.1.2.jar;C:\Users\Kanna Naveen\.m2\repository\net\minidev\json-smart\2.5.0\json-smart-2.5.0.jar;C:\Users\Kanna Naveen\.m2\repository\net\minidev\accessors-smart\2.5.0\accessors-smart-2.5.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\ow2\asm\asm\9.3\asm-9.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\awaitility\awaitility\4.2.0\awaitility-4.2.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\hamcrest\hamcrest\2.2\hamcrest-2.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.2\junit-jupiter-5.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.2\junit-jupiter-api-5.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\platform\junit-platform-commons\1.10.2\junit-platform-commons-1.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.2\junit-jupiter-params-5.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.2\junit-jupiter-engine-5.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\junit\platform\junit-platform-engine\1.10.2\junit-platform-engine-1.10.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\Kanna Naveen\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.12\byte-buddy-agent-1.14.12.jar;C:\Users\Kanna Naveen\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\mockito\mockito-junit-jupiter\5.7.0\mockito-junit-jupiter-5.7.0.jar;C:\Users\Kanna Naveen\.m2\repository\org\skyscreamer\jsonassert\1.5.1\jsonassert-1.5.1.jar;C:\Users\Kanna Naveen\.m2\repository\com\vaadin\external\google\android-json\0.0.20131108.vaadin1\android-json-0.0.20131108.vaadin1.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-core\6.1.4\spring-core-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-jcl\6.1.4\spring-jcl-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\spring-test\6.1.4\spring-test-6.1.4.jar;C:\Users\Kanna Naveen\.m2\repository\org\xmlunit\xmlunit-core\2.9.1\xmlunit-core-2.9.1.jar;C:\Users\Kanna Naveen\.m2\repository\com\googlecode\json-simple\json-simple\1.1.1\json-simple-1.1.1.jar;C:\Users\Kanna Naveen\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\hamcrest\hamcrest-core\2.2\hamcrest-core-2.2.jar;C:\Users\Kanna Naveen\.m2\repository\org\projectlombok\lombok\1.18.30\lombok-1.18.30.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-devtools\3.2.3\spring-boot-devtools-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot\3.2.3\spring-boot-3.2.3.jar;C:\Users\Kanna Naveen\.m2\repository\org\springframework\boot\spring-boot-autoconfigure\3.2.3\spring-boot-autoconfigure-3.2.3.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\Kanna Naveen"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-01-16"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-17"/>
    <property name="file.separator" value="\"/>
    <property name="style.color" value="always"/>
    <property name="basedir" value="C:\Workspaces\Eclipse\web projects\ecommerce"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="windows-1252"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\Kanna Naveen\AppData\Local\Temp\surefire16259247560553314419\surefirebooter-20240331184955679_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.10+11-LTS-240"/>
    <property name="user.name" value="Kanna Naveen"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\Kanna Naveen\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\KANNAN~1\AppData\Local\Temp\"/>
    <property name="com.zaxxer.hikari.pool_number" value="1"/>
    <property name="java.version" value="17.0.10"/>
    <property name="user.dir" value="C:\Workspaces\Eclipse\web projects\ecommerce"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="14564"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="CONSOLE_LOG_CHARSET" value="windows-1252"/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-17\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Python312\Scripts\;C:\Program Files\Python312\;C:\Program Files\Common Files\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\PowerShell\7\;C:\apache-maven-3.9.6\bin;C:\Program Files\MySQL\MySQL Server 8.0\bin;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\Kanna Naveen\AppData\Local\Microsoft\WindowsApps;C:\Users\Kanna Naveen\AppData\Local\Programs\Microsoft VS Code\bin;;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.10+11-LTS-240"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="dbCategoryDefauttData" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="1.005">
    <system-out><![CDATA[18:49:56.776 [main] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils -- Could not detect default configuration classes for test class [com.fresco.ecommerce.ECommerceApplicationTests]: ECommerceApplicationTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
18:49:56.913 [main] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper -- Found @SpringBootConfiguration com.fresco.ecommerce.ECommerceApplication for test class com.fresco.ecommerce.ECommerceApplicationTests
18:49:57.165 [main] INFO org.springframework.boot.devtools.restart.RestartApplicationListener -- Restart disabled due to context in which it is running

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.2.3)

2024-03-31T18:49:57.551+05:30  INFO 14564 --- [           main] c.f.ecommerce.ECommerceApplicationTests  : Starting ECommerceApplicationTests using Java 17.0.10 with PID 14564 (started by Kanna Naveen in C:\Workspaces\Eclipse\web projects\ecommerce)
2024-03-31T18:49:57.556+05:30  INFO 14564 --- [           main] c.f.ecommerce.ECommerceApplicationTests  : No active profile set, falling back to 1 default profile: "default"
2024-03-31T18:49:58.523+05:30  INFO 14564 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-03-31T18:49:58.638+05:30  INFO 14564 --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 91 ms. Found 6 JPA repository interfaces.
2024-03-31T18:49:59.243+05:30  INFO 14564 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2024-03-31T18:49:59.473+05:30  INFO 14564 --- [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
2024-03-31T18:49:59.475+05:30  INFO 14564 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2024-03-31T18:49:59.568+05:30  INFO 14564 --- [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-03-31T18:49:59.675+05:30  INFO 14564 --- [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.4.4.Final
2024-03-31T18:49:59.725+05:30  INFO 14564 --- [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-03-31T18:50:00.124+05:30  INFO 14564 --- [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-03-31T18:50:01.490+05:30  INFO 14564 --- [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: drop table if exists cart cascade 
Hibernate: drop table if exists cart_product cascade 
Hibernate: drop table if exists category cascade 
Hibernate: drop table if exists client cascade 
Hibernate: drop table if exists product cascade 
Hibernate: drop table if exists role cascade 
Hibernate: drop table if exists user_roles cascade 
Hibernate: drop sequence if exists cart_product_seq
Hibernate: drop sequence if exists cart_seq
Hibernate: drop sequence if exists category_seq
Hibernate: drop sequence if exists client_seq
Hibernate: drop sequence if exists product_seq
Hibernate: drop sequence if exists role_seq
Hibernate: create sequence cart_product_seq start with 1 increment by 50
Hibernate: create sequence cart_seq start with 1 increment by 50
Hibernate: create sequence category_seq start with 1 increment by 50
Hibernate: create sequence client_seq start with 1 increment by 50
Hibernate: create sequence product_seq start with 1 increment by 50
Hibernate: create sequence role_seq start with 1 increment by 50
Hibernate: create table cart (cart_id integer not null, total_amount float(53), user_id integer unique, primary key (cart_id))
Hibernate: create table cart_product (cart_id integer, cp_id integer not null, product_id integer unique, quantity integer, primary key (cp_id))
Hibernate: create table category (category_id integer not null, category_name varchar(255), primary key (category_id))
Hibernate: create table client (user_id integer not null, password varchar(255), username varchar(255), primary key (user_id))
Hibernate: create table product (category_id integer, price float(53), product_id integer not null, seller_id integer, product_name varchar(255), primary key (product_id))
Hibernate: create table role (role_id integer not null, role varchar(255), primary key (role_id))
Hibernate: create table user_roles (role_id integer not null, user_id integer not null, primary key (role_id, user_id))
Hibernate: alter table if exists cart add constraint FKo36o30ea6f2y0n433cru5ip4v foreign key (user_id) references client
Hibernate: alter table if exists cart_product add constraint FKlv5x4iresnv4xspvomrwd8ej9 foreign key (cart_id) references cart
Hibernate: alter table if exists cart_product add constraint FK2kdlr8hs2bwl14u8oop49vrxi foreign key (product_id) references product
Hibernate: alter table if exists product add constraint FK1mtsbur82frn64de7balymq9s foreign key (category_id) references category
Hibernate: alter table if exists product add constraint FKf7ya3vifwcwi0866kti9w3a1v foreign key (seller_id) references client
Hibernate: alter table if exists user_roles add constraint FKrhfovtciq1l558cw6udg0h0d3 foreign key (role_id) references role
Hibernate: alter table if exists user_roles add constraint FKs2g5i4d6eotfcwvibs3gaji7p foreign key (user_id) references client
2024-03-31T18:50:01.577+05:30  INFO 14564 --- [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-03-31T18:50:01.810+05:30  WARN 14564 --- [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2024-03-31T18:50:02.832+05:30  INFO 14564 --- [           main] c.f.ecommerce.ECommerceApplicationTests  : Started ECommerceApplicationTests in 5.682 seconds (process running for 7.011)
order 1
Hibernate: select c1_0.category_id,c1_0.category_name from category c1_0
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="dbUserDefaultData" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.027">
    <system-out><![CDATA[order 2
Hibernate: select u1_0.user_id,u1_0.password,u1_0.username from client u1_0
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="dbProductDefaultData" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.024">
    <system-out><![CDATA[order 3
Hibernate: select p1_0.product_id,p1_0.category_id,p1_0.price,p1_0.product_name,p1_0.seller_id from product p1_0
Hibernate: select c1_0.category_id,c1_0.category_name,p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from category c1_0 left join product p1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where c1_0.category_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select c1_0.category_id,c1_0.category_name,p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from category c1_0 left join product p1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where c1_0.category_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
]]></system-out>
  </testcase>
  <testcase name="dbCartDefaultData" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.016">
    <system-out><![CDATA[order 4
Hibernate: select c1_0.cart_id,c1_0.total_amount,c1_0.user_id from cart c1_0
Hibernate: select u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from client u1_0 left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where u1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from client u1_0 left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where u1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="updateUser" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.08">
    <system-out><![CDATA[order 5
Hibernate: select u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from client u1_0 left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where u1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from client u1_0 left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where u1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: update client set password=?,username=? where user_id=?
Hibernate: select u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from client u1_0 left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where u1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from client u1_0 left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where u1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: update client set password=?,username=? where user_id=?
]]></system-out>
  </testcase>
  <testcase name="checkUpdatedUsers" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.017">
    <system-out><![CDATA[order 6
Hibernate: select u1_0.user_id,u1_0.password,u1_0.username from client u1_0
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="updateProduct" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.021">
    <system-out><![CDATA[order 7
Hibernate: select p1_0.product_id,c1_0.category_id,c1_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,s1_0.username from product p1_0 left join category c1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id left join user_roles r1_0 on s1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where p1_0.product_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select p1_0.product_id,c1_0.category_id,c1_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,s1_0.username from product p1_0 left join category c1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id left join user_roles r1_0 on s1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where p1_0.product_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: update product set category_id=?,price=?,product_name=?,seller_id=? where product_id=?
]]></system-out>
  </testcase>
  <testcase name="checkUpdatedProducts" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.019">
    <system-out><![CDATA[order 8
Hibernate: select p1_0.product_id,p1_0.category_id,p1_0.price,p1_0.product_name,p1_0.seller_id from product p1_0
Hibernate: select c1_0.category_id,c1_0.category_name,p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from category c1_0 left join product p1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where c1_0.category_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select c1_0.category_id,c1_0.category_name,p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from category c1_0 left join product p1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where c1_0.category_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
]]></system-out>
  </testcase>
  <testcase name="compareUserAndCartOwner" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.022">
    <system-out><![CDATA[order 9
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from client u1_0 left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where u1_0.user_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="removeProductFromcar" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.051">
    <system-out><![CDATA[order 10
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select cp1_0.cp_id,c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,r2_0.user_id,r2_1.role_id,r2_1.role,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join cart c1_0 on c1_0.cart_id=cp1_0.cart_id left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id left join user_roles r2_0 on s1_0.user_id=r2_0.user_id left join role r2_1 on r2_1.role_id=r2_0.role_id where cp1_0.cp_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select cp1_0.cp_id,c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,r2_0.user_id,r2_1.role_id,r2_1.role,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join cart c1_0 on c1_0.cart_id=cp1_0.cart_id left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id left join user_roles r2_0 on s1_0.user_id=r2_0.user_id left join role r2_1 on r2_1.role_id=r2_0.role_id where cp1_0.cp_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: delete from cart_product where cp_id=?
]]></system-out>
  </testcase>
  <testcase name="checkProductRemovedFromCar" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.011">
    <system-out><![CDATA[order 11
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
]]></system-out>
  </testcase>
  <testcase name="addCartProduct" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.006">
    <system-out><![CDATA[order 12
]]></system-out>
  </testcase>
  <testcase name="addNewProduct" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.041">
    <system-out><![CDATA[order 13
Hibernate: select p1_0.product_id,c1_0.category_id,c1_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,s1_0.username from product p1_0 left join category c1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id left join user_roles r1_0 on s1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where p1_0.product_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select cp1_0.cp_id,c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join cart c1_0 on c1_0.cart_id=cp1_0.cart_id left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cp_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select p1_0.product_id,c1_0.category_id,c1_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,s1_0.username from product p1_0 left join category c1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id left join user_roles r1_0 on s1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where p1_0.product_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select next value for cart_product_seq
Hibernate: insert into cart_product (cart_id,product_id,quantity,cp_id) values (?,?,?,?)
Hibernate: select cp1_0.cp_id,cp1_0.cart_id,cp1_0.product_id,cp1_0.quantity from cart_product cp1_0
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select p1_0.product_id,c1_0.category_id,c1_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,s1_0.username from product p1_0 left join category c1_0 on c1_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id left join user_roles r1_0 on s1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where p1_0.product_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
]]></system-out>
  </testcase>
  <testcase name="checkUserCart" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.011">
    <system-out><![CDATA[order 14
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
]]></system-out>
  </testcase>
  <testcase name="checkUserCartProduct" classname="com.fresco.ecommerce.ECommerceApplicationTests" time="0.01">
    <system-out><![CDATA[order 15
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.cart_id=?
Hibernate: select cp1_0.cart_id,cp1_0.cp_id,p1_0.product_id,c2_0.category_id,c2_0.category_name,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username,cp1_0.quantity from cart_product cp1_0 left join product p1_0 on p1_0.product_id=cp1_0.product_id left join category c2_0 on c2_0.category_id=p1_0.category_id left join client s1_0 on s1_0.user_id=p1_0.seller_id where cp1_0.cart_id=?
Hibernate: select c1_0.cart_id,c1_0.total_amount,u1_0.user_id,u1_0.password,r1_0.user_id,r1_1.role_id,r1_1.role,u1_0.username from cart c1_0 left join client u1_0 on u1_0.user_id=c1_0.user_id left join user_roles r1_0 on u1_0.user_id=r1_0.user_id left join role r1_1 on r1_1.role_id=r1_0.role_id where c1_0.user_id=?
Hibernate: select r1_0.user_id,r1_1.role_id,r1_1.role from user_roles r1_0 join role r1_1 on r1_1.role_id=r1_0.role_id where r1_0.user_id=?
Hibernate: select p1_0.category_id,p1_0.product_id,p1_0.price,p1_0.product_name,s1_0.user_id,s1_0.password,s1_0.username from product p1_0 left join client s1_0 on s1_0.user_id=p1_0.seller_id where p1_0.category_id=?
]]></system-out>
  </testcase>
</testsuite>